/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ReferralV3Upgradeable {
  export type StructIDStruct = {
    id: PromiseOrValue<BigNumberish>;
    oldID: PromiseOrValue<string>;
    isActive: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
    joiningTime: PromiseOrValue<BigNumberish>;
    deactivateTime: PromiseOrValue<BigNumberish>;
    refererID: PromiseOrValue<BigNumberish>;
    refereeIDs: PromiseOrValue<BigNumberish>[];
    teamIDs: PromiseOrValue<BigNumberish>[];
    teamLevel: PromiseOrValue<BigNumberish>[];
    selfBusiness: PromiseOrValue<BigNumberish>;
    selfBusinessOld: PromiseOrValue<BigNumberish>;
    directBusiness: PromiseOrValue<BigNumberish>;
    directBusinessOld: PromiseOrValue<BigNumberish>;
    teamBusiness: PromiseOrValue<BigNumberish>;
    teamBusinessOld: PromiseOrValue<BigNumberish>;
    royaltyClubBusiness: PromiseOrValue<BigNumberish>;
    timeStampRoyaltyClub: PromiseOrValue<BigNumberish>;
    royaltyClubPackageID: PromiseOrValue<BigNumberish>;
    royaltyClubListIndex: PromiseOrValue<BigNumberish>;
    referralPaid: PromiseOrValue<BigNumberish>;
    rewardPaidRoyaltyClub: PromiseOrValue<BigNumberish>;
    totalTopUp: PromiseOrValue<BigNumberish>;
    totalIncome: PromiseOrValue<BigNumberish>;
    totalMaxLimitAmount: PromiseOrValue<BigNumberish>;
    currentTopUp: PromiseOrValue<BigNumberish>;
    currentTopUpTime: PromiseOrValue<BigNumberish>;
    totalROIClaimed: PromiseOrValue<BigNumberish>;
    roiIDs: PromiseOrValue<BigNumberish>[];
    roiClaimed: PromiseOrValue<BigNumberish>;
    roiClaimedTimestamp: PromiseOrValue<BigNumberish>;
    balanceClaimed: PromiseOrValue<BigNumberish>;
  };

  export type StructIDStructOutput = [
    number,
    string,
    boolean,
    string,
    BigNumber,
    BigNumber,
    number,
    number[],
    number[],
    number[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: number;
    oldID: string;
    isActive: boolean;
    owner: string;
    joiningTime: BigNumber;
    deactivateTime: BigNumber;
    refererID: number;
    refereeIDs: number[];
    teamIDs: number[];
    teamLevel: number[];
    selfBusiness: BigNumber;
    selfBusinessOld: BigNumber;
    directBusiness: BigNumber;
    directBusinessOld: BigNumber;
    teamBusiness: BigNumber;
    teamBusinessOld: BigNumber;
    royaltyClubBusiness: BigNumber;
    timeStampRoyaltyClub: BigNumber;
    royaltyClubPackageID: number;
    royaltyClubListIndex: BigNumber;
    referralPaid: BigNumber;
    rewardPaidRoyaltyClub: BigNumber;
    totalTopUp: BigNumber;
    totalIncome: BigNumber;
    totalMaxLimitAmount: BigNumber;
    currentTopUp: BigNumber;
    currentTopUpTime: BigNumber;
    totalROIClaimed: BigNumber;
    roiIDs: number[];
    roiClaimed: BigNumber;
    roiClaimedTimestamp: BigNumber;
    balanceClaimed: BigNumber;
  };

  export type StructROIStruct = {
    id: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    ownerID: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    roiRate: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
  };

  export type StructROIStructOutput = [
    number,
    boolean,
    number,
    BigNumber,
    number,
    BigNumber
  ] & {
    id: number;
    isActive: boolean;
    ownerID: number;
    value: BigNumber;
    roiRate: number;
    startTime: BigNumber;
  };

  export type StructAccountStruct = {
    isDisabled: PromiseOrValue<boolean>;
    accountIDs: PromiseOrValue<BigNumberish>[];
  };

  export type StructAccountStructOutput = [boolean, number[]] & {
    isDisabled: boolean;
    accountIDs: number[];
  };
}

export interface ReferralV3UpgradeableInterface extends utils.Interface {
  functions: {
    "_disabledUsersList(uint256)": FunctionFragment;
    "activateID(uint32)": FunctionFragment;
    "addTeam(uint32,uint32)": FunctionFragment;
    "admins(uint256)": FunctionFragment;
    "claimBalance(uint32,uint256)": FunctionFragment;
    "claimROI(uint32)": FunctionFragment;
    "companyTurnoverTimeLimit()": FunctionFragment;
    "companyTurnoverTimeStamp()": FunctionFragment;
    "companyTurnoverWithTimeLimit()": FunctionFragment;
    "decimals()": FunctionFragment;
    "disableUserAdmin(address)": FunctionFragment;
    "getIDAccount(uint32)": FunctionFragment;
    "getIDRoyaltyClubLevel(uint32)": FunctionFragment;
    "getMinContributionETH()": FunctionFragment;
    "getPriceOracleContract()": FunctionFragment;
    "getROIAccount(uint32)": FunctionFragment;
    "getUserAccount(address)": FunctionFragment;
    "getUserIDTotalROI(uint32)": FunctionFragment;
    "getUserTotalActiveROIValue(uint32)": FunctionFragment;
    "getUserUnlockCount(uint32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isPayROI()": FunctionFragment;
    "isPayRoyaltyClubBonus()": FunctionFragment;
    "isUserDisabledByAdmin(address)": FunctionFragment;
    "levelRates(uint256)": FunctionFragment;
    "maxLevelsCount()": FunctionFragment;
    "minContributionIn()": FunctionFragment;
    "minContributionInUSD()": FunctionFragment;
    "owner()": FunctionFragment;
    "packagesCount()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeUserFromDisableList(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyClubPackageCount()": FunctionFragment;
    "sendETHAdmin(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setMinContribution(uint256)": FunctionFragment;
    "setPriceOracleContract(address)": FunctionFragment;
    "setROI(uint16,uint256,uint256)": FunctionFragment;
    "setROIIDCount(uint32)": FunctionFragment;
    "totalIDs()": FunctionFragment;
    "totalROIIDs()": FunctionFragment;
    "totalROIPaid()": FunctionFragment;
    "totalReferralPaid()": FunctionFragment;
    "totalRoyaltyClubBonusPaid()": FunctionFragment;
    "totalRoyaltyClubBonusPaidETH()": FunctionFragment;
    "totalTopUpID(uint32)": FunctionFragment;
    "totalUsers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTotalIDs(uint32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawETHAdmin()": FunctionFragment;
    "withdrawTokensAdmin(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_disabledUsersList"
      | "activateID"
      | "addTeam"
      | "admins"
      | "claimBalance"
      | "claimROI"
      | "companyTurnoverTimeLimit"
      | "companyTurnoverTimeStamp"
      | "companyTurnoverWithTimeLimit"
      | "decimals"
      | "disableUserAdmin"
      | "getIDAccount"
      | "getIDRoyaltyClubLevel"
      | "getMinContributionETH"
      | "getPriceOracleContract"
      | "getROIAccount"
      | "getUserAccount"
      | "getUserIDTotalROI"
      | "getUserTotalActiveROIValue"
      | "getUserUnlockCount"
      | "initialize"
      | "isPayROI"
      | "isPayRoyaltyClubBonus"
      | "isUserDisabledByAdmin"
      | "levelRates"
      | "maxLevelsCount"
      | "minContributionIn"
      | "minContributionInUSD"
      | "owner"
      | "packagesCount"
      | "proxiableUUID"
      | "removeUserFromDisableList"
      | "renounceOwnership"
      | "royaltyClubPackageCount"
      | "sendETHAdmin"
      | "setAdmin"
      | "setMinContribution"
      | "setPriceOracleContract"
      | "setROI"
      | "setROIIDCount"
      | "totalIDs"
      | "totalROIIDs"
      | "totalROIPaid"
      | "totalReferralPaid"
      | "totalRoyaltyClubBonusPaid"
      | "totalRoyaltyClubBonusPaidETH"
      | "totalTopUpID"
      | "totalUsers"
      | "transferOwnership"
      | "updateTotalIDs"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawETHAdmin"
      | "withdrawTokensAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_disabledUsersList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTeam",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimROI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "companyTurnoverTimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companyTurnoverTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companyTurnoverWithTimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableUserAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIDAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIDRoyaltyClubLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinContributionETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getROIAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIDTotalROI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalActiveROIValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPayROI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPayRoyaltyClubBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserDisabledByAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelRates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLevelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContributionIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContributionInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packagesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserFromDisableList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyClubPackageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendETHAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinContribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracleContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setROI",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setROIIDCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "totalIDs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalROIIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalROIPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferralPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoyaltyClubBonusPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoyaltyClubBonusPaidETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTopUpID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalIDs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_disabledUsersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activateID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "companyTurnoverTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyTurnoverTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyTurnoverWithTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIDAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIDRoyaltyClubLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinContributionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getROIAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIDTotalROI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalActiveROIValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPayROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayRoyaltyClubBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserDisabledByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLevelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContributionIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContributionInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packagesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserFromDisableList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyClubPackageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendETHAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setROIIDCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalROIIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalROIPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferralPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRoyaltyClubBonusPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRoyaltyClubBonusPaidETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTopUpID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensAdmin",
    data: BytesLike
  ): Result;

  events: {
    "AccountInfoIDAttached(address,uint256,uint256)": EventFragment;
    "AddedInRoyaltyClubList(uint256,uint256,uint256)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "IDDeactivated(uint256,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PackageAdded(uint256)": EventFragment;
    "PackageRemoved(uint256)": EventFragment;
    "PackageUpdated(uint256)": EventFragment;
    "ROIClaimed(uint256,uint256)": EventFragment;
    "ReferralNotPaid(uint256,uint256,string)": EventFragment;
    "ReferralRewardPaid(uint256,uint256,uint256,uint256)": EventFragment;
    "RegisterRefererFailed(address,address,string)": EventFragment;
    "RegisteredReferer(uint256,uint256)": EventFragment;
    "RegisteredTeamAddress(address,uint256,uint256,uint256)": EventFragment;
    "RoyaltyClubBonusPaid(uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountInfoIDAttached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedInRoyaltyClubList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IDDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ROIClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralNotPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterRefererFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredReferer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredTeamAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyClubBonusPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AccountInfoIDAttachedEventObject {
  ownerAddress: string;
  id: BigNumber;
  idIndex: BigNumber;
}
export type AccountInfoIDAttachedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AccountInfoIDAttachedEventObject
>;

export type AccountInfoIDAttachedEventFilter =
  TypedEventFilter<AccountInfoIDAttachedEvent>;

export interface AddedInRoyaltyClubListEventObject {
  userID: BigNumber;
  index: BigNumber;
  rank: BigNumber;
}
export type AddedInRoyaltyClubListEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AddedInRoyaltyClubListEventObject
>;

export type AddedInRoyaltyClubListEventFilter =
  TypedEventFilter<AddedInRoyaltyClubListEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface IDDeactivatedEventObject {
  id: BigNumber;
  reason: string;
}
export type IDDeactivatedEvent = TypedEvent<
  [BigNumber, string],
  IDDeactivatedEventObject
>;

export type IDDeactivatedEventFilter = TypedEventFilter<IDDeactivatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PackageAddedEventObject {
  packageID: BigNumber;
}
export type PackageAddedEvent = TypedEvent<
  [BigNumber],
  PackageAddedEventObject
>;

export type PackageAddedEventFilter = TypedEventFilter<PackageAddedEvent>;

export interface PackageRemovedEventObject {
  packageID: BigNumber;
}
export type PackageRemovedEvent = TypedEvent<
  [BigNumber],
  PackageRemovedEventObject
>;

export type PackageRemovedEventFilter = TypedEventFilter<PackageRemovedEvent>;

export interface PackageUpdatedEventObject {
  packageID: BigNumber;
}
export type PackageUpdatedEvent = TypedEvent<
  [BigNumber],
  PackageUpdatedEventObject
>;

export type PackageUpdatedEventFilter = TypedEventFilter<PackageUpdatedEvent>;

export interface ROIClaimedEventObject {
  userID: BigNumber;
  reward: BigNumber;
}
export type ROIClaimedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ROIClaimedEventObject
>;

export type ROIClaimedEventFilter = TypedEventFilter<ROIClaimedEvent>;

export interface ReferralNotPaidEventObject {
  refererID: BigNumber;
  level: BigNumber;
  reason: string;
}
export type ReferralNotPaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ReferralNotPaidEventObject
>;

export type ReferralNotPaidEventFilter = TypedEventFilter<ReferralNotPaidEvent>;

export interface ReferralRewardPaidEventObject {
  refereeID: BigNumber;
  referrerID: BigNumber;
  amount: BigNumber;
  level: BigNumber;
}
export type ReferralRewardPaidEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ReferralRewardPaidEventObject
>;

export type ReferralRewardPaidEventFilter =
  TypedEventFilter<ReferralRewardPaidEvent>;

export interface RegisterRefererFailedEventObject {
  refereeID: string;
  referrerID: string;
  reason: string;
}
export type RegisterRefererFailedEvent = TypedEvent<
  [string, string, string],
  RegisterRefererFailedEventObject
>;

export type RegisterRefererFailedEventFilter =
  TypedEventFilter<RegisterRefererFailedEvent>;

export interface RegisteredRefererEventObject {
  id: BigNumber;
  refererID: BigNumber;
}
export type RegisteredRefererEvent = TypedEvent<
  [BigNumber, BigNumber],
  RegisteredRefererEventObject
>;

export type RegisteredRefererEventFilter =
  TypedEventFilter<RegisteredRefererEvent>;

export interface RegisteredTeamAddressEventObject {
  parent: string;
  parentAccountID: BigNumber;
  referrerID: BigNumber;
  refereeID: BigNumber;
}
export type RegisteredTeamAddressEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RegisteredTeamAddressEventObject
>;

export type RegisteredTeamAddressEventFilter =
  TypedEventFilter<RegisteredTeamAddressEvent>;

export interface RoyaltyClubBonusPaidEventObject {
  packageID: BigNumber;
  userID: BigNumber;
  amount: BigNumber;
}
export type RoyaltyClubBonusPaidEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RoyaltyClubBonusPaidEventObject
>;

export type RoyaltyClubBonusPaidEventFilter =
  TypedEventFilter<RoyaltyClubBonusPaidEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ReferralV3Upgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferralV3UpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _disabledUsersList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    activateID(
      _refererID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTeam(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimBalance(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    companyTurnoverTimeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    companyTurnoverTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    companyTurnoverWithTimeLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    disableUserAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getIDAccount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReferralV3Upgradeable.StructIDStructOutput]>;

    getIDRoyaltyClubLevel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinContributionETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOracleContract(overrides?: CallOverrides): Promise<[string]>;

    getROIAccount(
      _roiID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReferralV3Upgradeable.StructROIStructOutput]>;

    getUserAccount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReferralV3Upgradeable.StructAccountStructOutput]>;

    getUserIDTotalROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTotalActiveROIValue(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserUnlockCount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPayROI(overrides?: CallOverrides): Promise<[boolean]>;

    isPayRoyaltyClubBonus(overrides?: CallOverrides): Promise<[boolean]>;

    isUserDisabledByAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levelRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    maxLevelsCount(overrides?: CallOverrides): Promise<[number]>;

    minContributionIn(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContributionInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    packagesCount(overrides?: CallOverrides): Promise<[number]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeUserFromDisableList(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyClubPackageCount(overrides?: CallOverrides): Promise<[number]>;

    sendETHAdmin(
      _address: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinContribution(
      _valueInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracleContract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setROI(
      _roiRateInDecimals: PromiseOrValue<BigNumberish>,
      _roiDurationInDays: PromiseOrValue<BigNumberish>,
      _roiClaimTimelimitInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setROIIDCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalIDs(overrides?: CallOverrides): Promise<[number]>;

    totalROIIDs(overrides?: CallOverrides): Promise<[number]>;

    totalROIPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReferralPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRoyaltyClubBonusPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRoyaltyClubBonusPaidETH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTopUpID(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalUsers(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTotalIDs(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETHAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensAdmin(
      _tokenAddress: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _disabledUsersList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  activateID(
    _refererID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTeam(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimBalance(
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimROI(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  companyTurnoverTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  companyTurnoverTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  companyTurnoverWithTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  disableUserAdmin(
    _userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getIDAccount(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReferralV3Upgradeable.StructIDStructOutput>;

  getIDRoyaltyClubLevel(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinContributionETH(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOracleContract(overrides?: CallOverrides): Promise<string>;

  getROIAccount(
    _roiID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReferralV3Upgradeable.StructROIStructOutput>;

  getUserAccount(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReferralV3Upgradeable.StructAccountStructOutput>;

  getUserIDTotalROI(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalActiveROIValue(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserUnlockCount(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPayROI(overrides?: CallOverrides): Promise<boolean>;

  isPayRoyaltyClubBonus(overrides?: CallOverrides): Promise<boolean>;

  isUserDisabledByAdmin(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levelRates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  maxLevelsCount(overrides?: CallOverrides): Promise<number>;

  minContributionIn(overrides?: CallOverrides): Promise<BigNumber>;

  minContributionInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  packagesCount(overrides?: CallOverrides): Promise<number>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeUserFromDisableList(
    _userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyClubPackageCount(overrides?: CallOverrides): Promise<number>;

  sendETHAdmin(
    _address: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinContribution(
    _valueInUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracleContract(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setROI(
    _roiRateInDecimals: PromiseOrValue<BigNumberish>,
    _roiDurationInDays: PromiseOrValue<BigNumberish>,
    _roiClaimTimelimitInSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setROIIDCount(
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalIDs(overrides?: CallOverrides): Promise<number>;

  totalROIIDs(overrides?: CallOverrides): Promise<number>;

  totalROIPaid(overrides?: CallOverrides): Promise<BigNumber>;

  totalReferralPaid(overrides?: CallOverrides): Promise<BigNumber>;

  totalRoyaltyClubBonusPaid(overrides?: CallOverrides): Promise<BigNumber>;

  totalRoyaltyClubBonusPaidETH(overrides?: CallOverrides): Promise<BigNumber>;

  totalTopUpID(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalUsers(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTotalIDs(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETHAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensAdmin(
    _tokenAddress: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _disabledUsersList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    activateID(
      _refererID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTeam(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimBalance(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    companyTurnoverTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    companyTurnoverTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    companyTurnoverWithTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    disableUserAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getIDAccount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReferralV3Upgradeable.StructIDStructOutput>;

    getIDRoyaltyClubLevel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinContributionETH(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracleContract(overrides?: CallOverrides): Promise<string>;

    getROIAccount(
      _roiID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReferralV3Upgradeable.StructROIStructOutput>;

    getUserAccount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReferralV3Upgradeable.StructAccountStructOutput>;

    getUserIDTotalROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalActiveROIValue(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnlockCount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isPayROI(overrides?: CallOverrides): Promise<boolean>;

    isPayRoyaltyClubBonus(overrides?: CallOverrides): Promise<boolean>;

    isUserDisabledByAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    maxLevelsCount(overrides?: CallOverrides): Promise<number>;

    minContributionIn(overrides?: CallOverrides): Promise<BigNumber>;

    minContributionInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    packagesCount(overrides?: CallOverrides): Promise<number>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeUserFromDisableList(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyClubPackageCount(overrides?: CallOverrides): Promise<number>;

    sendETHAdmin(
      _address: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinContribution(
      _valueInUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracleContract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setROI(
      _roiRateInDecimals: PromiseOrValue<BigNumberish>,
      _roiDurationInDays: PromiseOrValue<BigNumberish>,
      _roiClaimTimelimitInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setROIIDCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalIDs(overrides?: CallOverrides): Promise<number>;

    totalROIIDs(overrides?: CallOverrides): Promise<number>;

    totalROIPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalReferralPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoyaltyClubBonusPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoyaltyClubBonusPaidETH(overrides?: CallOverrides): Promise<BigNumber>;

    totalTopUpID(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalUsers(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTotalIDs(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETHAdmin(overrides?: CallOverrides): Promise<void>;

    withdrawTokensAdmin(
      _tokenAddress: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountInfoIDAttached(address,uint256,uint256)"(
      ownerAddress?: null,
      id?: null,
      idIndex?: null
    ): AccountInfoIDAttachedEventFilter;
    AccountInfoIDAttached(
      ownerAddress?: null,
      id?: null,
      idIndex?: null
    ): AccountInfoIDAttachedEventFilter;

    "AddedInRoyaltyClubList(uint256,uint256,uint256)"(
      userID?: null,
      index?: null,
      rank?: null
    ): AddedInRoyaltyClubListEventFilter;
    AddedInRoyaltyClubList(
      userID?: null,
      index?: null,
      rank?: null
    ): AddedInRoyaltyClubListEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "IDDeactivated(uint256,string)"(
      id?: null,
      reason?: null
    ): IDDeactivatedEventFilter;
    IDDeactivated(id?: null, reason?: null): IDDeactivatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PackageAdded(uint256)"(packageID?: null): PackageAddedEventFilter;
    PackageAdded(packageID?: null): PackageAddedEventFilter;

    "PackageRemoved(uint256)"(packageID?: null): PackageRemovedEventFilter;
    PackageRemoved(packageID?: null): PackageRemovedEventFilter;

    "PackageUpdated(uint256)"(packageID?: null): PackageUpdatedEventFilter;
    PackageUpdated(packageID?: null): PackageUpdatedEventFilter;

    "ROIClaimed(uint256,uint256)"(
      userID?: PromiseOrValue<BigNumberish> | null,
      reward?: PromiseOrValue<BigNumberish> | null
    ): ROIClaimedEventFilter;
    ROIClaimed(
      userID?: PromiseOrValue<BigNumberish> | null,
      reward?: PromiseOrValue<BigNumberish> | null
    ): ROIClaimedEventFilter;

    "ReferralNotPaid(uint256,uint256,string)"(
      refererID?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<string> | null
    ): ReferralNotPaidEventFilter;
    ReferralNotPaid(
      refererID?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      reason?: PromiseOrValue<string> | null
    ): ReferralNotPaidEventFilter;

    "ReferralRewardPaid(uint256,uint256,uint256,uint256)"(
      refereeID?: PromiseOrValue<BigNumberish> | null,
      referrerID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): ReferralRewardPaidEventFilter;
    ReferralRewardPaid(
      refereeID?: PromiseOrValue<BigNumberish> | null,
      referrerID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): ReferralRewardPaidEventFilter;

    "RegisterRefererFailed(address,address,string)"(
      refereeID?: PromiseOrValue<string> | null,
      referrerID?: PromiseOrValue<string> | null,
      reason?: PromiseOrValue<string> | null
    ): RegisterRefererFailedEventFilter;
    RegisterRefererFailed(
      refereeID?: PromiseOrValue<string> | null,
      referrerID?: PromiseOrValue<string> | null,
      reason?: PromiseOrValue<string> | null
    ): RegisterRefererFailedEventFilter;

    "RegisteredReferer(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      refererID?: PromiseOrValue<BigNumberish> | null
    ): RegisteredRefererEventFilter;
    RegisteredReferer(
      id?: PromiseOrValue<BigNumberish> | null,
      refererID?: PromiseOrValue<BigNumberish> | null
    ): RegisteredRefererEventFilter;

    "RegisteredTeamAddress(address,uint256,uint256,uint256)"(
      parent?: PromiseOrValue<string> | null,
      parentAccountID?: null,
      referrerID?: PromiseOrValue<BigNumberish> | null,
      refereeID?: PromiseOrValue<BigNumberish> | null
    ): RegisteredTeamAddressEventFilter;
    RegisteredTeamAddress(
      parent?: PromiseOrValue<string> | null,
      parentAccountID?: null,
      referrerID?: PromiseOrValue<BigNumberish> | null,
      refereeID?: PromiseOrValue<BigNumberish> | null
    ): RegisteredTeamAddressEventFilter;

    "RoyaltyClubBonusPaid(uint256,uint256,uint256)"(
      packageID?: null,
      userID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RoyaltyClubBonusPaidEventFilter;
    RoyaltyClubBonusPaid(
      packageID?: null,
      userID?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RoyaltyClubBonusPaidEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    _disabledUsersList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activateID(
      _refererID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTeam(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBalance(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    companyTurnoverTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    companyTurnoverTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    companyTurnoverWithTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    disableUserAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getIDAccount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIDRoyaltyClubLevel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinContributionETH(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    getROIAccount(
      _roiID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserIDTotalROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalActiveROIValue(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnlockCount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPayROI(overrides?: CallOverrides): Promise<BigNumber>;

    isPayRoyaltyClubBonus(overrides?: CallOverrides): Promise<BigNumber>;

    isUserDisabledByAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    minContributionIn(overrides?: CallOverrides): Promise<BigNumber>;

    minContributionInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    packagesCount(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeUserFromDisableList(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyClubPackageCount(overrides?: CallOverrides): Promise<BigNumber>;

    sendETHAdmin(
      _address: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinContribution(
      _valueInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracleContract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setROI(
      _roiRateInDecimals: PromiseOrValue<BigNumberish>,
      _roiDurationInDays: PromiseOrValue<BigNumberish>,
      _roiClaimTimelimitInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setROIIDCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalIDs(overrides?: CallOverrides): Promise<BigNumber>;

    totalROIIDs(overrides?: CallOverrides): Promise<BigNumber>;

    totalROIPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalReferralPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoyaltyClubBonusPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoyaltyClubBonusPaidETH(overrides?: CallOverrides): Promise<BigNumber>;

    totalTopUpID(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTotalIDs(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETHAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokensAdmin(
      _tokenAddress: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _disabledUsersList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateID(
      _refererID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTeam(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBalance(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    companyTurnoverTimeLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyTurnoverTimeStamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    companyTurnoverWithTimeLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableUserAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getIDAccount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIDRoyaltyClubLevel(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinContributionETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracleContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getROIAccount(
      _roiID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserIDTotalROI(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalActiveROIValue(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnlockCount(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPayROI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPayRoyaltyClubBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserDisabledByAdmin(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLevelsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minContributionIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minContributionInUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packagesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeUserFromDisableList(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyClubPackageCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendETHAdmin(
      _address: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinContribution(
      _valueInUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracleContract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setROI(
      _roiRateInDecimals: PromiseOrValue<BigNumberish>,
      _roiDurationInDays: PromiseOrValue<BigNumberish>,
      _roiClaimTimelimitInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setROIIDCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalROIIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalROIPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReferralPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRoyaltyClubBonusPaid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRoyaltyClubBonusPaidETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTopUpID(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTotalIDs(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETHAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensAdmin(
      _tokenAddress: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
